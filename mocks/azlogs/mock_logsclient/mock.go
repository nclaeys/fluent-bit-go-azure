// Code generated by MockGen. DO NOT EDIT.
// Source: out_azurelogsingestion/logs/main.go
//
// Generated by this command:
//
//	mockgen -build_flags=-mod=vendor -source=out_azurelogsingestion/logs/main.go -destination=mocks/azlogs/mock_logsclient/mock.go
//

// Package mock_logs is a generated GoMock package.
package mock_logs

import (
	context "context"
	reflect "reflect"

	azlogs "github.com/Azure/azure-sdk-for-go/sdk/monitor/ingestion/azlogs"
	gomock "go.uber.org/mock/gomock"
)

// MockAzureLogsClient is a mock of AzureLogsClient interface.
type MockAzureLogsClient struct {
	ctrl     *gomock.Controller
	recorder *MockAzureLogsClientMockRecorder
	isgomock struct{}
}

// MockAzureLogsClientMockRecorder is the mock recorder for MockAzureLogsClient.
type MockAzureLogsClientMockRecorder struct {
	mock *MockAzureLogsClient
}

// NewMockAzureLogsClient creates a new mock instance.
func NewMockAzureLogsClient(ctrl *gomock.Controller) *MockAzureLogsClient {
	mock := &MockAzureLogsClient{ctrl: ctrl}
	mock.recorder = &MockAzureLogsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAzureLogsClient) EXPECT() *MockAzureLogsClientMockRecorder {
	return m.recorder
}

// Upload mocks base method.
func (m *MockAzureLogsClient) Upload(ctx context.Context, dcrImmutableId, streamName string, logs []byte, options *azlogs.UploadOptions) (azlogs.UploadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", ctx, dcrImmutableId, streamName, logs, options)
	ret0, _ := ret[0].(azlogs.UploadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upload indicates an expected call of Upload.
func (mr *MockAzureLogsClientMockRecorder) Upload(ctx, dcrImmutableId, streamName, logs, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockAzureLogsClient)(nil).Upload), ctx, dcrImmutableId, streamName, logs, options)
}
